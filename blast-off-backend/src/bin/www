#!/usr/bin/env node

/**
 * Module dependencies.
 */
const primaryHandler = require('../app');
const debug = require('debug')('blast-off-backend:server');
const http = require('http');
const dotenv = require('dotenv');
const path = require('path');

// Loading config based on environment type
if (process.env.NODE_ENV) {
  console.log(`Running in ${process.env.NODE_ENV} mode`);
  const config = dotenv.config({
    path: path.resolve(
        process.cwd(),
        `./configurations/${process.env.NODE_ENV}.config`
    )
  });
  if (config.error) {
    console.log('Error loading configuration file.');
    // immediateShutdown(-1);
  }
} else {
  console.log('No node environment specified.');
  // immediateShutdown(-1);
}
// Loading secrets
const secrets = dotenv.config();
if (secrets.error) {
  console.log('Secrets env not found, so some features will be disabled.');
} else {
  console.log('Secrets env found and loaded to the environment.');
}

/**
 * Get port from environment and store in Express.
 */
const port = normalizePort(process.env.PORT || '3000');
primaryHandler.set('port', port);

/**
 * Create HTTP server.
 */
const server = http.createServer(primaryHandler);

/**
 * Listen on provided port, on all network interfaces.
 */
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  console.log('Listening on ' + bind);
}
